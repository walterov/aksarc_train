name: Deploy AKS Arc on Azure Local
run-name: ${{ github.actor }} is deploying an AKS Arc cluster configured for AI and Flux ðŸš€
on:
  workflow_call:
    inputs:
      cluster-name:
        required: true
        type: string
      resource-group:
        required: true
        type: string
      custom-location:
        required: true
        type: string
      vnet-id:
        required: true
        type: string
      k8s-version:
        required: false
        type: string
        default: "1.30.4"
      git_ref:
        description: 'Git branch or tag to deploy'
        required: true
        type: string
        default: 'main'
      environment: # Added input parameter
        description: 'Choose deployment environment: production or staging'
        required: true
        type: string
        default: 'production'
        
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      SSH_PUBLIC_KEY:
        required: true
      GITOPS_PUSH_PAT:
        required: true

jobs:
  deploy-aks-cluster:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }
#          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upgrade Azure CLI
        run: |
          az upgrade --yes

      - name: Write SSH Public Key file
        run: |
          mkdir -p ~/.ssh/ # Create the .ssh directory if it doesn't exist
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        shell: bash # Ensure bash is used for consistent behavior

      - name: Create AKS Arc Cluster
        run: |
          az extension add --name aksarc
          az aksarc create \
            --name ${{ inputs.cluster-name }} \
            --resource-group ${{ inputs.resource-group }} \
            --custom-location ${{ inputs.custom-location }} \
            --vnet-id ${{ inputs.vnet-id }} \
            --control-plane-count 1 \
            --node-count 1 \
            --node-vm-size Standard_NC16_A2 \
            --kubernetes-version "${{ inputs.k8s-version }}" \
            --ssh-key-value ~/.ssh/id_rsa.pub \
            --aad-admin-group-object-ids "${{ secrets.AZURE_AD_ADMIN_GROUP_ID }}" \
            --enable-ai-toolchain-operator 
            

  label-gpu-nodes:
    name: Label GPU Nodes
    runs-on: ubuntu-latest
    needs: [deploy-aks-cluster]  # Ensure this runs after AKS deployment job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Azure authentication
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }
            
      - name: Install latest kubectl
        run: |
          echo "Installing latest kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Connect to AKS Arc cluster using az connectedk8s
        run: |
          echo "Starting kubectl proxy to AKS Arc..."
          az extension add --name connectedk8s --yes
          az connectedk8s proxy -n ${{ inputs.cluster-name }} -g ${{ inputs.resource-group }} &
          sleep 10  # Give time for proxy to establish

      - name: Label GPU-enabled nodes
        run: |
          #!/bin/bash
          set -e

          echo "Discovering GPU-enabled nodes..."
          GPU_NODES=$(kubectl get nodes -o json | jq -r '.items[] | select(.status.allocatable["nvidia.com/gpu"]) | .metadata.name')

          if [ -z "$GPU_NODES" ]; then
            echo "No GPU-enabled nodes found."
            exit 0
          fi

          for NODE in $GPU_NODES; do
            echo "Labeling node $NODE with app=llm-inference..."
            kubectl label node "$NODE" app=llm-inference --overwrite
            echo "Labeling node $NODE with apps=llm-inference..."
            kubectl label node "$NODE" apps=llm-inference --overwrite
          done

          echo "Labeling complete."

  generate-kaito-workspace-yaml:
    name: Generate KAITO Workspace YAML
    runs-on: ubuntu-latest
    needs: [label-gpu-nodes]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Azure authentication
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          }

    - name: Set up Git
      run: |
        git config --global user.name "GitOps Bot"
        git config --global user.email "gitops-bot@local"

    - name: Install latest kubectl
      run: |
        echo "Installing latest kubectl..."
        curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/kubectl
        kubectl version --client
        
    - name: Connect to AKS Arc cluster using az connectedk8s
      run: |
        echo "Starting kubectl proxy to AKS Arc..."
        az extension add --name connectedk8s --yes
        az connectedk8s proxy -n ${{ inputs.cluster-name }} -g ${{ inputs.resource-group }} &
        sleep 10  # Give time for proxy to establish

    - name: Run KAITO YAML generation script
      run: .github/scripts/gen-yaml.sh
      env:
        GITOPS_PUSH_PAT: ${{ secrets.GITOPS_PUSH_PAT }}

  deploy-flex-extension:
    name: Deploy Flex and Configure Repo
    runs-on: ubuntu-latest
    needs: [generate-kaito-workspace-yaml]  # Ensure this runs after kaito workspace job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Azure authentication
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }
    
      - name: Registration of GitOps/Flex Azure resource providers
        run: |
          az provider register --namespace Microsoft.Kubernetes --wait
          az provider register --namespace Microsoft.ContainerService --wait
          az provider register --namespace Microsoft.KubernetesConfiguration --wait

      - name: Add k8s- CLI extensions 
        run: |
          az extension add -n k8s-configuration
          az extension add -n k8s-extension
          az extension update -n k8s-configuration
          az extension update -n k8s-extension


      - name: Validate environment input
        run: |
          case "${{ inputs.environment }}" in
            production|staging)
              echo "Valid environment: ${{ inputs.environment }}"
              ;;
            *)
              echo "Invalid environment: ${{ inputs.environment }}"
              exit 1
              ;;
          esac
          
      - name: Pick environment selection 
        run: |     
          # Set Kustomize path based on input
          if [ ${{ inputs.environment }} = "production" ]; then
            KUSTOMIZE_PATH="./apps/production"
            echo "Kustomize path: apps/production to cluster: $CLUSTER"
          elif [ ${{ inputs.environment }} = "staging" ]; then
            KUSTOMIZE_PATH="./apps/staging"
            echo "Kustomize path: apps/staging to cluster: $CLUSTER"
          else
            echo "Invalid deployment type.  Defaulting to production"
            KUSTOMIZE_PATH="apps/production" # added default
          fi

      - name: Deploy the microsoft.flux extension to the cluster and create the Flux configuration 
        run: |
          az k8s-configuration flux create \
            --resource-group ${{ inputs.resource-group }} \
            --cluster-name ${{ inputs.cluster-name }} \
            --name cluster-config \
            --namespace cluster-config \
            --cluster-type connectedClusters \
            --scope cluster \
            --url https://github.com/walterov/gitops-flux2-kustomize-helm-mt \
            --branch main \
            --kustomization name=infra path=./infrastructure prune=true \
            --kustomization name=apps path=$KUSTOMIZE_PATH prune=true dependsOn=\["infra"\]



